stages:
  - restore
  - build
  - test
  - dockerize
  - check
  - deploy

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"

restore:
  stage: restore
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet restore

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet build --configuration Release

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet test --logger:trx
  artifacts:
    paths:
      - backend/TestResults/
    when: always

dockerize:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  script:
    # Build local Docker image (no push)
      - docker build -t my-dotnet-app:latest -f pipeline-utilities/Dockerfile .


check-portainer-connection:
  stage: check
  image: curlimages/curl:latest
  script:
    - echo "Checking connection to Portainer at $PORTAINER_URL/api/status"
    - curl -sk --connect-timeout 10 --max-time 20 "$PORTAINER_URL/api/status"

deploy:
  stage: deploy
  image: alpine:latest

  variables:
    STACK_NAME: my-dotnet-stack  # You can override this in GitLab CI/CD Variables UI

  before_script:
    - apk add --no-cache curl jq

  script:
    - |
      echo "Authenticating with Portainer..."
      JSON_PAYLOAD=$(jq -n --arg user "$PORTAINER_USER" --arg pass "$PORTAINER_PW" '{Username: $user, Password: $pass}')
      RESPONSE=$(curl -sk -X POST "$PORTAINER_URL/api/auth" -H "Content-Type: application/json" -d "$JSON_PAYLOAD")
      echo "Raw response from Portainer:"
      echo "$RESPONSE"
      JWT=$(echo "$RESPONSE" | jq -r .jwt)

      echo "Checking for existing stack..."
      STACK_ID=$(curl -sk -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks" | jq -r --arg name "$STACK_NAME" '.[] | select(.Name==$name) | .Id')

      echo "Generating stack.yml..."
      cat <<EOF > stack.yml
      version: "3.8"
      services:
      backend:
        image: my-dotnet-app:latest
        ports:
      - "8080:80"
      deploy:
      replicas: 1
      EOF

      if [ -n "$STACK_ID" ]; then
        echo "Updating existing stack ID: $STACK_ID"
        curl -sk -X PUT "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -H "Content-Type: application/json" \
          --data "$(jq -n --arg content "$(cat stack.yml)" '{ StackFileContent: $content, Prune: true }')"
      else
        echo "Creating new stack: $STACK_NAME"
        curl -sk -X POST "$PORTAINER_URL/api/stacks?type=1&method=string&endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -F "Name=$STACK_NAME" \
          -F "StackFileContent=@stack.yml"
      fi

  only:
    - main

