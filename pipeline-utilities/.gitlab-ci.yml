stages:
  - restore
  - build
  - test
  - dockerize
  - check
  - deploy
  - teardown

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"

restore:
  stage: restore
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet restore

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet build --configuration Release

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet test --logger:trx
  artifacts:
    paths:
      - backend/TestResults/
    when: always

dockerize:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE:latest -f pipeline-utilities/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:latest

check-portainer-connection:
  stage: check
  image: curlimages/curl:latest
  script:
    - echo "Checking connection to Portainer at $PORTAINER_URL/api/status"
    - curl -sk --connect-timeout 10 --max-time 20 "$PORTAINER_URL/api/status"

deploy:
  stage: deploy
  image: python:3.10-alpine    
  before_script:
    - apk add --no-cache bash curl jq  
  environment:
    name: production
    url: https://g13-$CI_COMMIT_REF_SLUG.cc25.chasacademy.dev
    on_stop: teardown
  script:
    - echo "Deploying to Portainer"
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]]; then
        export DOCKER_COMPOSE="docker-compose.yml"
      else
        export DOCKER_COMPOSE="docker-compose-test.yml"
      fi
    - cp ../$DOCKER_COMPOSE stack.yml
    - |
      RESPONSE=$(curl -sk -X POST "$PORTAINER_URL/api/auth" \
        -H "Content-Type: application/json" \
        -d '{"username": "'"$PORTAINER_USER"'", "password": "'"$PORTAINER_PW"'"}')
      JWT=$(echo "$RESPONSE" | jq -r .jwt)
      STACK_ID=$(curl -sk -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks" | jq -r --arg name "$STACK_NAME" '.[] | select(.Name==$name) | .Id')
      if [ -n "$STACK_ID" ]; then
        echo "Updating existing stack: $STACK_NAME"
        UPDATE_RESPONSE=$(curl -sk -X PUT "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -H "Content-Type: application/json" \
          --data "$(jq -n --arg fileContent "$(cat stack.yml)" '{StackFileContent: $fileContent, Prune: true }')")
        if echo "$UPDATE_RESPONSE" | jq -e '.message' >/dev/null; then
          echo "Error updating stack: $(echo "$UPDATE_RESPONSE" | jq -r '.message')"
          exit 1
        fi
      else
        echo "Creating new stack: $STACK_NAME"
        CREATE_RESPONSE=$(curl -sk -X POST "$PORTAINER_URL/api/stacks?type=1&method=string&endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -F "Name=$STACK_NAME" \
          -F "StackFileContent=@stack.yml")
        if echo "$CREATE_RESPONSE" | jq -e '.message' >/dev/null; then
          echo "Error creating stack: $(echo "$CREATE_RESPONSE" | jq -r '.message')"
          exit 1
        fi
      fi
      echo "Deploy finished."
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

teardown:
  stage: teardown
  script:
    - echo "Tearing down environment"
  when: manual
  environment:
    name: production
    action: stop


