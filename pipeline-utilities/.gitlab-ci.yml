stages:
  - restore
  - build
  - test
  - dockerize
  - check
  - deploy

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"

restore:
  stage: restore
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet restore

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet build --configuration Release

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet test --logger:trx
  artifacts:
    paths:
      - backend/TestResults/
    when: always

dockerize:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  script:
    # Build local Docker image (no push)
      - docker build -t my-dotnet-app:latest -f pipeline-utilities/Dockerfile .


check-portainer-connection:
  stage: check
  image: curlimages/curl:latest
  script:
    - echo "Checking connection to Portainer at $PORTAINER_URL/api/status"
    - curl -sk --connect-timeout 10 --max-time 20 "$PORTAINER_URL/api/status"

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - set -x
    - echo "Authenticating with Portainer..."
    - >
      RESPONSE=$(curl -sk -X POST "$PORTAINER_URL/api/auth" \
        -H "Content-Type: application/json" \
        -d "{\"Username\":\"$PORTAINER_USER\",\"Password\":\"$PORTAINER_PW\"}")
    - echo "Raw response from Portainer:"
    - echo "$RESPONSE"
    - |
      if echo "$RESPONSE" | jq -e '.message' >/dev/null; then
        echo "Portainer auth error: $(echo "$RESPONSE" | jq -r '.message')"
        exit 1
      fi
    - JWT=$(echo "$RESPONSE" | jq -r .jwt)
    - echo "Checking for existing stack..."
    - >
      STACK_ID=$(curl -s -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks" |
      jq -r --arg name "$STACK_NAME" '.[] | select(.Name==$name) | .Id')
    - |
      cat <<EOF > stack.yml
      version: "3.8"
      services:
        backend:
          image: my-dotnet-app:latest
          ports:
            - "8080:80"
          deploy:
            replicas: 1
      EOF
    - |
      if [ -n "$STACK_ID" ]; then
        echo "Updating existing stack: $STACK_NAME"
        UPDATE_RESPONSE=$(curl -s -X PUT "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -H "Content-Type: application/json" \
          --data "$(jq -n --arg fileContent "$(cat stack.yml)" '{StackFileContent: $fileContent, Prune: true }')")
        echo "Update response: $UPDATE_RESPONSE"
        if echo "$UPDATE_RESPONSE" | jq -e '.message' >/dev/null; then
          echo "Error updating stack: $(echo "$UPDATE_RESPONSE" | jq -r '.message')"
          exit 1
        fi
      else
        echo "Creating new stack: $STACK_NAME"
        CREATE_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/stacks?type=1&method=string&endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $JWT" \
          -F "Name=$STACK_NAME" \
          -F "StackFileContent=@stack.yml")
        echo "Create response: $CREATE_RESPONSE"
        if echo "$CREATE_RESPONSE" | jq -e '.message' >/dev/null; then
          echo "Error creating stack: $(echo "$CREATE_RESPONSE" | jq -r '.message')"
          exit 1
        fi
      fi
    - echo "Deploy finished."
  only:
    - main





