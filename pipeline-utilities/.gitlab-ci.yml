stages:
  - restore
  - build
  - test
  - dockerize
  - check
  - deploy

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"

restore:
  stage: restore
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet restore

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet build --configuration Release

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd backend
    - dotnet test --logger:trx
  artifacts:
    paths:
      - backend/TestResults/
    when: always

dockerize:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    # Login to GitLab Container Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    # Build Docker image with correct registry tag
    - docker build -t $CI_REGISTRY_IMAGE:latest -f pipeline-utilities/Dockerfile .
    # Push the image
    - docker push $CI_REGISTRY_IMAGE:latest

check-portainer-connection:
  stage: check
  image: curlimages/curl:latest
  script:
    - echo "Checking connection to Portainer at $PORTAINER_URL/api/status"
    - curl -sk --connect-timeout 10 --max-time 20 "$PORTAINER_URL/api/status"

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - set -x
    - echo "Authenticating with Portainer..."
    - >
      RESPONSE=$(curl -sk -X POST "$PORTAINER_URL/api/auth" \
        -H "Content-Type: application/json" \
        -d "{\"Username\":\"$PORTAINER_USER\",\"Password\":\"$PORTAINER_PW\"}")
    - echo "Raw response from Portainer:"
    - echo "$RESPONSE"
    - |
      if echo "$RESPONSE" | jq -e '.message' >/dev/null; then
        echo "Portainer auth error: $(echo "$RESPONSE" | jq -r '.message')"
        exit 1
      fi
    - JWT=$(echo "$RESPONSE" | jq -r .jwt)
    - echo "Checking for existing stack..."
    - >
      STACK_ID=$(curl -s -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks" | jq -r --arg name "$STACK_NAME" '.[] | select(.Name==$name) | .Id')






